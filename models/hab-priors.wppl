// webppl hab-priors.wppl --require mht --require utils

var fpath = "/Users/mht/Documents/research/backfiring-words/models/data/"

var existData = mht.readCSV(fpath+"habprior2-existence.csv").data
var waitData = mht.readCSV(fpath+"habprior2-logdayRate.csv").data

var df_e = subset(dataFrame(existData, ["val"]), "gender", "female")
var df_w = subset(dataFrame(waitData, ["val"]), "gender", "female")

var items = _.uniq(_.pluck(df_e, "item"))
// var items = ["wears socks"]
var genders = _.uniq(_.pluck(df_e, "gender"))


var header = "Item,Parameter,Value"
var samples = 100000
var burn = samples/2
var incrOpts = {burn:burn, verbose:true, verboseLag: samples/10}
// var mcmcOpts = {samples:samples/2, burn:burn, verbose:false}
var outfile1 = "results/habpriors2-female-existence-logdayRate-incrMH" + samples/1000 + "k_burn" + burn/1000 + "ka.csv"
// 

var questions = ["Q1","Q2"]

var priorModel = function(){

	foreach(items, function(i){

		var itemData_e = subset(df_e, "item", i)
		var itemData_w = subset(df_w, "item", i)

		foreach(questions, function(q){

		// 	foreach(genders, function(g){

				if (q=="Q1") {

					// var genderData_e = subset(df_e, "gender", "female")

					// % of Americans question
					var gamma = uniform(0,1)
					var delta = uniform(0,50)

					var scr = sum(map(function(d){
						return betaERP.score([shape_alpha(gamma,delta),
											 shape_beta(gamma,delta)], 
											 avoidEnds(d))
					}, _.pluck(itemData_e, "val")))

					factor(scr)
					// console.log("q1" + scr)

					var predictiveExistence = beta(shape_alpha(gamma,delta), shape_beta(gamma,delta))

					query.add([i,"rate_gamma"], gamma)
					query.add([i,"rate_delta"], delta)
					query.add([i,"habit_rate"], predictiveExistence)

				} else {
					// var genderData_w = subset(df_w, "gender", "female")

					var gamma_2 = uniform(0,1)
					var delta_2 = uniform(0,50)

					// var mu = uniform(0,10)
					// var sigma = uniform(0,20)

					var scr2 = sum(map(function(d){
						return betaERP.score([
											 shape_alpha(gamma_2,delta_2),
											 shape_beta(gamma_2,delta_2)
											 ], 
											 avoidEnds(d))
					}, _.pluck(itemData_w, "val")))


					// var scr2 = sum(map(function(d){
					// 	return gaussianERP.score([mu, sigma], d)
					// }, _.pluck(genderData_w, "logval")))

					factor(scr2)
					
					// console.log("q2" + scr2)

					var predictiveStrength = beta(shape_alpha(gamma_2,delta_2), shape_beta(gamma_2,delta_2))

					query.add([i,"strength_gamma"], gamma_2)
					query.add([i,"strength_delta"], delta_2)
					query.add([i,"habit_strength"], predictiveStrength)

				}

		// 	})

		})

	})			
	return query
}

var results = IncrementalMH(priorModel, samples, incrOpts)
mht.erpWriter(results, outfile1, header)

// mht.writeLine(h1file, header)
// foreach(items, function(i){frequencyModel(i, h1file)})
// mht.closeFile(h1file)
// console.log("------Frequency inference complete------")
console.log("__Written to " + outfile1)




