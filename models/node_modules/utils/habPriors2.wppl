var fpath = "/Users/mht/Documents/research/backfiring-words/models/data/"

var existData = mht.readCSV(fpath+"habprior2-existence.csv").data
var waitData = mht.readCSV(fpath+"habprior2-timesper5yr.csv").data

var data = mht.readCSV(fpath+"minimal-1-prefwindow.csv").data
var df = dataFrame(data, ["freq_5years","rounded_ntimes_prefwindow"])

var df_e0 = dataFrame(existData, ["val"])

var df_e = map(function(x){
	return _.extend(x, {
		avoided_endval: avoidEnds(x["val"])
	})
}, df_e0)


// var df_w0 = dataFrame(waitData, ["val"])
// var df_w = map(function(x){
// 	return _.extend(x, {
// 		avoided_endval: avoidEnds(x["val"])
// 	})
// }, df_w0)

var df_w = dataFrame(waitData, ["val", "logval"])


var items = _.uniq(_.pluck(df, "item"))
// var items = ["does cocaine"]
var genders = _.uniq(_.pluck(df, "gender"))

// data is in terms of log ( N_times / 5 years )

var questions = ["Q1","Q2"]

var priorModel = function(){

	foreach(items, function(i){

		var itemData_e = subset(df_e, "item", i)
		var itemData_w = subset(df_w, "item", i)

		foreach(questions, function(q){

		// 	foreach(genders, function(g){

				if (q=="Q1") {

					// var genderData_e = subset(df_e, "gender", g)

					// % of Americans question
					var gamma = uniform(0,1)
					var delta = uniform(0,50)

					var scr = sum(map(function(d){
						return betaERP.score([shape_alpha(gamma,delta),
											 shape_beta(gamma,delta)], d)
					}, _.pluck(itemData_e, "avoided_endval")))

					factor(scr)
					// console.log("q1" + scr)

					// var predictiveExistence = beta(shape_alpha(gamma,delta), shape_beta(gamma,delta))

					// query.add([i,"habit_rate","predictive"], predictiveExistence)
					// query.add([i,"habit_rate","gamma"], gamma)
					query.add([i,"habit_rate"], {gamma:gamma, delta:delta})
					// query.add([i,"habit_rate","delta"], delta)

				} else {
				// 	var genderData_w = subset(df_w, "gender", g)

					// var gamma_2 = uniform(0,1)
					// var delta_2 = uniform(0,50)

					var mu = uniform(0,10)
					var sigma = uniform(0,20)

					// var scr2 = sum(map(function(d){
					// 	return betaERP.score([shape_alpha(gamma_2,delta_2),
					// 						 shape_beta(gamma_2,delta_2)
					// 						 ], 
					// 						 d)
					// }, _.pluck(itemData_w, "avoided_endval")))


					var scr2 = sum(map(function(d){
						return gaussianERP.score([mu, sigma], d)
					}, _.pluck(itemData_w, "logval")))

					factor(scr2)
					
					// console.log("q2" + scr2)

					// var predictiveStrength = beta(shape_alpha(gamma_2,delta_2), shape_beta(gamma_2,delta_2))


					// query.add([i,"habit_strength"], predictiveStrength)
					query.add([i,"habit_strength"], {mu: mu, sigma:sigma})
					// query.add([i,"habit_strength","delta"], delta_2)

				}

			})

		// })

	})			
	return query
}



