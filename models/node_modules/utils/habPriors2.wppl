
var avoidEnds = function(response){
    return response<=0 ? 0.001 : response>=1 ? 0.999 : response
}

var fpath = "/Users/mht/Documents/research/backfiring-words/models/data/"

var existData = mht.readCSV(fpath+"habprior2-existence.csv").data
var waitData = mht.readCSV(fpath+"habprior2-timesper5yr.csv").data

var df_e0 = dataFrame(existData, ["val"])

var df_e = map(function(x){
	return _.extend(x, {
		avoided_endval: avoidEnds(x["val"])
	})
}, df_e0)

var df_w = dataFrame(waitData, ["ntimes_pref_rounded"])

// var items = _.uniq(_.pluck(df_w, "item"))



var genders = _.uniq(_.pluck(df_w, "gender"))


var data = mht.readCSV(fpath+"minimal-1-prefwindow.csv").data
var df = dataFrame(data, ["freq_5years","rounded_ntimes_prefwindow"])


var df_rounded = map(function(x){
	var statebins = _.range(-1, 8.5, 0.5)
	return _.extend(x, {roundedFreq: nearestPriorBin(x["logfreq"], statebins)})
}, df)


// var df_w0 = dataFrame(waitData, ["val"])
// var df_w = map(function(x){
// 	return _.extend(x, {
// 		avoided_endval: avoidEnds(x["val"])
// 	})
// }, df_w0)


var items = _.uniq(_.pluck(df, "item"))
// var items = ["does cocaine"]
// var items = ["drinks coffee"]

var genders = _.uniq(_.pluck(df, "gender"))

// data is in terms of log ( N_times / 5 years )

var questions = ["Q1","Q2"]
// var questions = ["Q2"]

var priorModel = function(){

	foreach(items, function(i){

		var itemData_e = subset(df_e, "item", i)
		var itemData_w = subset(df_w, "item", i)

		foreach(questions, function(q){

		// 	foreach(genders, function(g){

				if (q=="Q1") {

					// var genderData_e = subset(df_e, "gender", g)

					// % of Americans question
					var gamma = uniform(0,1)
					var delta = uniform(0,50)

					var shape_a =shape_alpha(gamma,delta)
					var shape_b = shape_beta(gamma,delta)

					var scr = sum(map(function(d){
						return betaERP.score([shape_a, shape_b], d)
					}, _.pluck(itemData_e, "avoided_endval")))

					// console.log("q1" + scr)
					factor(scr)

					// var predictiveExistence = beta(shape_alpha(gamma,delta), shape_beta(gamma,delta))

					// query.add([i,"habit_rate","predictive"], predictiveExistence)
					// query.add([i,"habit_rate","gamma"], gamma)
					query.add([i,"habit_rate"], {a:shape_a, b:shape_b})
					// query.add([i,"habit_rate","delta"], delta)

				} else {
				// 	var genderData_w = subset(df_w, "gender", g)

					// var gamma_2 = uniform(0,1)
					// var delta_2 = uniform(0,50)

					// var theta = uniform(0,1)
					// var lambda_1 = i == "smokes cigarettes" ? gamma(1,100) : gamma(1, 10)
					// var lambda_2 = i == "smokes cigarettes" ? gamma(1,100) : gamma(1, 10)
					// var lambda_1 = gamma(1, 50)
					// var lambda_2 = gamma(1, 50)

					// change to Poisson on preferred time window
					// prior params shape = 1, scale = 5

					var mu = uniform(0,10)
					var sigma = uniform(0,20)

					// var lambda = gamma(1, 5)

					// var scr2 = sum(map(function(d){
					// 	return betaERP.score([shape_alpha(gamma_2,delta_2),
					// 						 shape_beta(gamma_2,delta_2)
					// 						 ], 
					// 						 d)
					// }, _.pluck(itemData_w, "avoided_endval")))


					// var scr2 = sum(map(function(d){
					// 	return util.logsumexp([
					// 		Math.log(theta) + poissonERP.score([lambda_1], d),
					// 		Math.log(1-theta)+poissonERP.score([lambda_2], d)
					// 	])
					// }, _.pluck(itemData_w, "ntimes_pref_rounded")))


					// var scr2 = sum(map(function(d){
					// 	return poissonERP.score([lambda], d)
					// }, _.pluck(itemData_w, "logval")))


					var scr2 = sum(map(function(d){
						return gaussianERP.score([mu, sigma], d)
					}, _.pluck(itemData_w, "logval")))
					// console.log("q2" + scr2)

					factor(scr2)
					

					// var firstIsGreater = lambda_1 > lambda_2

					// var predictive = flip(theta) ? poisson(lambda_1) : poisson(lambda_2)

					// var primary_rate = firstIsGreater ? lambda_1 : lambda_2
					// var secondary_rate  = firstIsGreater ? lambda_2 : lambda_1
					// var mixture = firstIsGreater ? theta : 1 - theta

					// var predictiveStrength = beta(shape_alpha(gamma_2,delta_2), shape_beta(gamma_2,delta_2))

					query.add([i,"habit_strength"], {mu:mu,sigma: sigma})

					// query.add([i,"habit_strength"], predictiveStrength)
					// query.add([i,"habit_strength"], {rate1: primary_rate, rate2:secondary_rate})
					// query.add([i,"habit_strength"], {theta:mixture,rate1: primary_rate, rate2:secondary_rate})
					// query.add([i,"habit_strength","delta"], delta_2)

				}

			})

		// })

	})			
	return query
}



