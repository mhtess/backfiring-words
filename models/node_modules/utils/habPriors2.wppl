var fpath = "/Users/mht/Documents/research/habituals/models/priors/data/"
var fpath2 = "/Users/mht/Documents/research/habituals/models/truthjudgement/data/"

var existData = mht.readCSV(fpath+"prior2-existence.csv").data
var waitData = mht.readCSV(fpath+"prior2-timesper5yr.csv").data



var df_e = dataFrame(existData, ["val"])
var df_w = dataFrame(waitData, ["val", "logval"])

var items = _.uniq(_.pluck(df_e, "item"))
// var items = ["wears socks"]
var genders = _.uniq(_.pluck(df_e, "gender"))

// data is in terms of log ( N_times / 5 years )
var normalizing_frequency = Math.log(365*5)

var questions = ["Q1","Q2"]

var priorModel = function(){

	foreach(items, function(i){

		var itemData_e = subset(df_e, "item", i)
		var itemData_w = subset(df_w, "item", i)

		// foreach(questions, function(q){

		// 	foreach(genders, function(g){

		// 		if (q=="Q1") {

					// var genderData_e = subset(df_e, "gender", g)

					// % of Americans question
					var gamma = uniform(0,1)
					var delta = uniform(0,50)

					var scr = sum(map(function(d){
						return betaERP.score([shape_alpha(gamma,delta),
											 shape_beta(gamma,delta)], avoidEnds(d))
					}, _.pluck(itemData_e, "val")))

					factor(scr)
					// console.log("q1" + scr)

					var predictiveExistence = beta(shape_alpha(gamma,delta), shape_beta(gamma,delta))

					query.add([i,"habit_rate"], predictiveExistence)

				// } else {
				// 	var genderData_w = subset(df_w, "gender", g)

					var gamma_2 = uniform(0,1)
					var delta_2 = uniform(0,50)

					// var mu = uniform(0,10)
					// var sigma = uniform(0,20)

					var scr2 = sum(map(function(d){
						var normed_d = d / normalizing_frequency
						return betaERP.score([shape_alpha(gamma_2,delta_2),
											 shape_beta(gamma_2,delta_2)
											 ], 
											 avoidEnds(normed_d))
					}, _.pluck(itemData_w, "logval")))


					// var scr2 = sum(map(function(d){
					// 	return gaussianERP.score([mu, sigma], d)
					// }, _.pluck(genderData_w, "logval")))

					factor(scr2)
					
					console.log("q2" + scr2)

					var predictiveStrength = beta(shape_alpha(gamma_2,delta_2), shape_beta(gamma_2,delta_2))


					query.add([i,"habit_strength"], predictiveStrength)

		// 		}

		// 	})

		// })

	})			
	return query
}



