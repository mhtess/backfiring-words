// webppl backfiringWords.wppl

///fold:
var marginalize = function(myERP, label){
	Enumerate(function(){
		var x = sample(myERP)
		return x[label]
	})
}

var bins = [0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99]

var meaning = function(utt, effect){
		return utt=="It happened." ? effect :
				utt=="It did not happen." ? !effect:
				true
}

var literalBayesian = function(utterance, priorParameters, baseline) {
  Enumerate(function(){

 	var habit_rate = priorParameters.habit_rate
	var lambda_backoff = priorParameters.lambda_backoff
	var lambda_habit = priorParameters.lambda_habit
	var cost = priorParameters.cost

  	var habit = flip(habit_rate)

  	var dailyRate = habit ? 
    				lambda_habit : 
            lambda_backoff
    // probability that the event happens at least once in a day
  var p = 1-Math.exp(poissonERP.score([dailyRate],0))

  var event_probability = p == 1 ? 0.999 : p==0 ? 0.001 : p

  var action = flip(event_probability)


    var m = meaning(utterance, action)
    condition(baseline ? true : m)

    return dailyRate
  })
}


var listener0 = cache(function(utterance, event_probability) {
  Enumerate(function(){
    var action = flip(event_probability)
    var m = meaning(utterance, action)
    condition(m)
    return action
  })
})

var speaker1 = cache(function(action, event_probability, cost) {
  Enumerate(function(){
    var utterance = ["It happened.", 
                      "It did not happen.", 
                      "say nothing"][discrete([1,1,cost])]
    var L0 = listener0(utterance, event_probability)
    factor(L0.score([],action))
    return utterance
  })
})

var listener1 = function(utterance, priorParameters, alpha) {
  Enumerate(function(){


  var habit_rate = priorParameters.habit_rate
  var lambda_backoff = priorParameters.lambda_backoff
  var lambda_habit = priorParameters.lambda_habit
  var cost = priorParameters.cost

  var habit = flip(habit_rate)

  var dailyRate = habit ? 
          lambda_habit : 
          lambda_backoff

  var p = 1-Math.exp(poissonERP.score([dailyRate],0))

  var event_probability = p == 1 ? 0.999 : p==0 ? 0.001 : p
  // console.log(event_probability)
  // probability that the event happens at least once in a day
  var action = flip(event_probability)

  var S1 = speaker1(action, event_probability, cost)
  factor(alpha*S1.score([],utterance))

  // var predictive = flip(event_probability)
  return dailyRate
  })
}



var altlistener0 = cache(function(utterance, priorParameters) {
  Enumerate(function(){
  var habit_rate = priorParameters.habit_rate
  var lambda_backoff = priorParameters.lambda_backoff
  var lambda_habit = priorParameters.lambda_habit

    var habit = flip(habit_rate)

    var dailyRate = habit ? 
            lambda_habit : 
            lambda_backoff
    // probability that the event happens at least once in a day
  var p = 1-Math.exp(poissonERP.score([dailyRate],0))

  var event_probability = p == 1 ? 0.999 : p==0 ? 0.001 : p

  var action = flip(event_probability)

    var m = meaning(utterance, action)
    condition(m)
    return action
  })
})

var altspeaker1 = cache(function(action,priorParameters) {
  Enumerate(function(){
    var utterance = ["It happened.", 
                      "It did not happen.", 
                      "say nothing"][discrete([1,1,priorParameters.cost])]
    var L0 = altlistener0(utterance, priorParameters)
    factor(L0.score([],action))
    return utterance
  })
})

var altlistener1 = function(utterance, priorParameters, alpha) {
  Enumerate(function(){

  var habit_rate = priorParameters.habit_rate
  var lambda_backoff = priorParameters.lambda_backoff
  var lambda_habit = priorParameters.lambda_habit

  var habit = flip(habit_rate)

  var dailyRate = habit ? 
          lambda_habit : 
          lambda_backoff

  var p = 1-Math.exp(poissonERP.score([dailyRate],0))

  var event_probability = p == 1 ? 0.999 : p==0 ? 0.001 : p
  // console.log(event_probability)
  // probability that the event happens at least once in a day
  var action = flip(event_probability)

  var S1 = altspeaker1(action, priorParameters)
  factor(alpha*S1.score([],utterance))

  // var predictive = flip(event_probability)
  return dailyRate
  })
}









// var nullHypothesis = function(alpha, priorParameters){

// 	var a_strength = priorParameters.a_strength
// 	var a_prior = priorParameters.a_prior
// 	var b_strength = priorParameters.b_strength
// 	var bg_strength = priorParameters.bg_strength
// 	var primary_baserate = priorParameters.primary_baserate
// 	var secondary_baserate = priorParameters.secondary_baserate
// 	var primary_baserate_prior = priorParameters.primary_baserate_prior

// 	var cost = priorParameters.cost

// 	var queryReturn = priorParameters.query_return //e.g. "baseRate"

// 	var nullListener0 = cache(function(utterance) {
// 	  Enumerate(function(){
// 	    var commonGround = {
// 	      baseRate: flip(primary_baserate_prior) ? primary_baserate : secondary_baserate,
// 	      causalPower: flip(a_prior) ? a_strength : b_strength,
// 	      backgroundCause: bg_strength
// 	    }
// 	    var cause = flip(commonGround.baseRate)
// 	    var effect = cause ? flip(commonGround.causalPower) : 
// 	                         flip(commonGround.backgroundCause)
// 	    var m = meaning(utterance, effect)
// 	    condition(m)
// 	    return effect
// 	  })
// 	})

// 	var nullSpeaker1 = cache(function(effect, commonGround) {
// 	  Enumerate(function(){
// 	    var utterance = ["It happened.", 
// 	                      "It did not happen.", 
// 	                      "say nothing"][discrete([1,1,cost])]
// 	    var L0 = nullListener0(utterance)
// 	    factor(L0.score([],effect))
// 	    return utterance
// 	  })
// 	})

// 	var nullListener1 = function(utterance) {
// 	  Enumerate(function(){
// 	    var commonGround = {
// 	      baseRate: flip(primary_baserate_prior) ? primary_baserate : secondary_baserate,
// 	      causalPower: flip(a_prior) ? a_strength : b_strength,
// 	      backgroundCause: bg_strength
// 	    }
// 	    var cause = flip(commonGround.baseRate)
// 	    var effect = cause ? flip(commonGround.causalPower) : 
// 	                         flip(commonGround.backgroundCause)
// 	    var S1 = nullSpeaker1(effect, commonGround)
// 	    factor(alpha*S1.score([],utterance))
// 	    return commonGround
// 	  })
// 	}

// 	return nullListener1("It happened.")
// }



// var literalBayesianHypothesis = function(priorParameters, baseline){

// 	var habit_rate = priorParameters.habit_rate
// 	var habit_component = priorParameters.habit_component
// 	var baserate_component = priorParameters.baserate_component
// 	// var habit_strength = priorParameters.habit_strength
// 	// var action_baserate = priorParameters.action_baserate

// 	var cost = priorParameters.cost

// 	var listener0 = function(utterance) {
// 	  Enumerate(function(){
// 	  	var habit = flip(habit_rate)

// 	  	var event_probability = habit ? 
// 	    				bins[discrete(habit_component)] : 
// 	                    bins[discrete(baserate_component)]

// 	    var action = flip(event_probability)
// 	    var m = meaning(utterance, action)
// 	    condition(baseline ? true : m)
// 	    var predictive = flip(event_probability)
// 	    return event_probability
// 	  })
// 	}

// 	return listener0("It happened.")
// }



