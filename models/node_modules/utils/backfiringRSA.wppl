// webppl backfiringWords.wppl

///fold:
var marginalizeERP = function(myERP, label){
	Enumerate(function(){
		var x = sample(myERP)
		return x[label]
	})
}



var meaning = function(utt, effect){
		return utt=="It happened." ? effect :
				utt=="It did not happen." ? !effect:
				true
}


var backfireHypothesis = function(alpha, priorParameters){

	var a_prior = priorParameters.a_prior
	var a_strength = priorParameters.a_strength
	var b_strength = priorParameters.b_strength

	var primary_baserate_prior = priorParameters.primary_baserate_prior
	var primary_baserate = priorParameters.primary_baserate
	var secondary_baserate = priorParameters.secondary_baserate

	var bg_strength = priorParameters.bg_strength

	var listener0 = cache(function(utterance, commonGround) {
	  Enumerate(function(){
	    var cause = flip(commonGround.baseRate)
	    var effect = cause ? flip(commonGround.causalPower) : 
	                         flip(commonGround.backgroundCause)

	    var m = meaning(utterance, effect)
	    condition(m)
	    return effect
	  })
	})

	var speaker1 = cache(function(effect, commonGround) {
	  Enumerate(function(){
	    var utterance = ["It happened.", 
	                      "It did not happen.", 
	                      "say nothing"][discrete([1,1,1])]
	    var L0 = listener0(utterance, commonGround)
	    factor(L0.score([],effect))
	    return utterance
	  })
	})

	var listener1 = function(utterance) {
	  Enumerate(function(){

	    var commonGround = {
	      baseRate: flip(primary_baserate_prior) ? primary_baserate : secondary_baserate,
	      causalPower: flip(a_prior) ? a_strength : b_strength,
	      backgroundCause: bg_strength
	    }

	    var cause = flip(commonGround.baseRate)
	    var effect = cause ? flip(commonGround.causalPower) : 
	                         flip(commonGround.backgroundCause)
	    // console.log(commonGround)
	    // console.log(cause)
	    // console.log(effect)
	    var S1 = speaker1(effect, commonGround)
	    factor(alpha*S1.score([],utterance))
	    return commonGround.causalPower
	    // return [commonGround.baseRate, commonGround.causalPower, Math.exp(S1.score([],utterance))]
	  })
	}

	return listener1("It happened.")
	// return speaker1(false, {
	// 	baseRate: 1,
	// 	causalPower: 0.5,
	// 	backgroundCause:0
	// })
}



var nullHypothesis = function(alpha, priorParameters){

	var a_strength = priorParameters.a_strength
	var a_prior = priorParameters.a_prior
	var b_strength = priorParameters.b_strength
	var bg_strength = priorParameters.bg_strength
	var primary_baserate = priorParameters.primary_baserate
	var secondary_baserate = priorParameters.secondary_baserate
	var primary_baserate_prior = priorParameters.primary_baserate_prior

	var nullListener0 = cache(function(utterance) {
	  Enumerate(function(){
	    var commonGround = {
	      baseRate: flip(primary_baserate_prior) ? primary_baserate : secondary_baserate,
	      causalPower: flip(a_prior) ? a_strength : b_strength,
	      backgroundCause: bg_strength
	    }
	    var cause = flip(commonGround.baseRate)
	    var effect = cause ? flip(commonGround.causalPower) : 
	                         flip(commonGround.backgroundCause)
	    var m = meaning(utterance, effect)
	    condition(m)
	    return effect
	  })
	})

	var nullSpeaker1 = cache(function(effect, commonGround) {
	  Enumerate(function(){
	    var utterance = ["It happened.", 
	                      "It did not happen.", 
	                      "say nothing"][discrete([1,1,1])]
	    var L0 = nullListener0(utterance)
	    factor(L0.score([],effect))
	    return utterance
	  })
	})

	var nullListener1 = function(utterance) {
	  Enumerate(function(){
	    var commonGround = {
	      baseRate: flip(primary_baserate_prior) ? primary_baserate : secondary_baserate,
	      causalPower: flip(a_prior) ? a_strength : b_strength,
	      backgroundCause: bg_strength
	    }
	    var cause = flip(commonGround.baseRate)
	    var effect = cause ? flip(commonGround.causalPower) : 
	                         flip(commonGround.backgroundCause)
	    var S1 = nullSpeaker1(effect, commonGround)
	    factor(alpha*S1.score([],utterance))
	    return commonGround.causalPower
	  })
	}

	return nullListener1("It happened.")
}



var literalBayesianHypothesis = function(alpha, priorParameters){

	var a_prior = priorParameters.a_prior
	var a_strength = priorParameters.a_strength
	var b_strength = priorParameters.b_strength

	var primary_baserate_prior = priorParameters.primary_baserate_prior
	var primary_baserate = priorParameters.primary_baserate
	var secondary_baserate = priorParameters.secondary_baserate

	var bg_strength = priorParameters.bg_strength

	var listener0 = cache(function(utterance) {
	  Enumerate(function(){
	    var commonGround = {
	      baseRate: flip(primary_baserate_prior) ? primary_baserate : secondary_baserate,
	      causalPower: flip(a_prior) ? a_strength : b_strength,
	      backgroundCause: bg_strength
	    }
	    var cause = flip(commonGround.baseRate)
	    var effect = cause ? flip(commonGround.causalPower) : 
	                         flip(commonGround.backgroundCause)
	    var m = meaning(utterance, effect)
	    condition(m)
	    return commonGround.causalPower
	  })
	})

	return listener0("It happened.")
}



