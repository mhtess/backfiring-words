// webppl backfiringWords.wppl

///fold:
var marginalize = function(myERP, label){
	Enumerate(function(){
		var x = sample(myERP)
		return x[label]
	})
}



var meaning = function(utt, effect){
		return utt=="It happened." ? effect :
				utt=="It did not happen." ? !effect:
				true
}


var backfireHypothesis = function(alpha, priorParameters){

	var habit_rate = priorParameters.habit_rate
	var habit_strength = priorParameters.habit_strength
	var action_baserate = priorParameters.action_baserate

	var cost = priorParameters.cost

	var listener0 = cache(function(utterance, habit) {
	  Enumerate(function(){
	    var action = habit ? 
	    				flip(habit_strength) : 
	                    flip(action_baserate)

	    var m = meaning(utterance, action)
	    condition(m)
	    return action
	  })
	})

	var speaker1 = cache(function(action, habit) {
	  Enumerate(function(){
	    var utterance = ["It happened.", 
	                      "It did not happen.", 
	                      "say nothing"][discrete([1,1,cost])]
	    var L0 = listener0(action, habit)
	    factor(L0.score([],action))
	    return utterance
	  })
	})

	var listener1 = function(utterance) {
	  Enumerate(function(){

	  	var habit = flip(habit_rate)

	    var action = habit ? 
	    				flip(habit_strength) : 
	                    flip(action_baserate)

	    var S1 = speaker1(action, habit)
	    factor(alpha*S1.score([],utterance))
	    return habit
	  })
	}

	return listener1("It happened.")
}



var nullHypothesis = function(alpha, priorParameters){

	var a_strength = priorParameters.a_strength
	var a_prior = priorParameters.a_prior
	var b_strength = priorParameters.b_strength
	var bg_strength = priorParameters.bg_strength
	var primary_baserate = priorParameters.primary_baserate
	var secondary_baserate = priorParameters.secondary_baserate
	var primary_baserate_prior = priorParameters.primary_baserate_prior

	var cost = priorParameters.cost

	var queryReturn = priorParameters.query_return //e.g. "baseRate"

	var nullListener0 = cache(function(utterance) {
	  Enumerate(function(){
	    var commonGround = {
	      baseRate: flip(primary_baserate_prior) ? primary_baserate : secondary_baserate,
	      causalPower: flip(a_prior) ? a_strength : b_strength,
	      backgroundCause: bg_strength
	    }
	    var cause = flip(commonGround.baseRate)
	    var effect = cause ? flip(commonGround.causalPower) : 
	                         flip(commonGround.backgroundCause)
	    var m = meaning(utterance, effect)
	    condition(m)
	    return effect
	  })
	})

	var nullSpeaker1 = cache(function(effect, commonGround) {
	  Enumerate(function(){
	    var utterance = ["It happened.", 
	                      "It did not happen.", 
	                      "say nothing"][discrete([1,1,cost])]
	    var L0 = nullListener0(utterance)
	    factor(L0.score([],effect))
	    return utterance
	  })
	})

	var nullListener1 = function(utterance) {
	  Enumerate(function(){
	    var commonGround = {
	      baseRate: flip(primary_baserate_prior) ? primary_baserate : secondary_baserate,
	      causalPower: flip(a_prior) ? a_strength : b_strength,
	      backgroundCause: bg_strength
	    }
	    var cause = flip(commonGround.baseRate)
	    var effect = cause ? flip(commonGround.causalPower) : 
	                         flip(commonGround.backgroundCause)
	    var S1 = nullSpeaker1(effect, commonGround)
	    factor(alpha*S1.score([],utterance))
	    return commonGround
	  })
	}

	return nullListener1("It happened.")
}



var literalBayesianHypothesis = function(alpha, priorParameters){

	var a_prior = priorParameters.a_prior
	var a_strength = priorParameters.a_strength
	var b_strength = priorParameters.b_strength

	var primary_baserate_prior = priorParameters.primary_baserate_prior
	var primary_baserate = priorParameters.primary_baserate
	var secondary_baserate = priorParameters.secondary_baserate

	var bg_strength = priorParameters.bg_strength

	var queryReturn = priorParameters.query_return //e.g. "baseRate"

	var listener0 = cache(function(utterance) {
	  Enumerate(function(){
	    var commonGround = {
	      baseRate: flip(primary_baserate_prior) ? primary_baserate : secondary_baserate,
	      causalPower: flip(a_prior) ? a_strength : b_strength,
	      backgroundCause: bg_strength
	    }
	    var cause = flip(commonGround.baseRate)
	    var effect = cause ? flip(commonGround.causalPower) : 
	                         flip(commonGround.backgroundCause)
	    var m = meaning(utterance, effect)
	    condition(m)
	    return commonGround
	  })
	})

	return listener0("It happened.")
}



